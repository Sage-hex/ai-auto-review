import { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Envelope, 
  Lock, 
  User, 
  Buildings, 
  SpinnerGap, 
  CheckCircle, 
  WarningCircle, 
  Eye, 
  EyeSlash, 
  ArrowRight 
} from 'phosphor-react';

export default function Register() {
  const [businessName, setBusinessName] = useState('');
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [step, setStep] = useState(1);
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  
  const { register } = useAuth();
  const navigate = useNavigate();

  const validateFirstStep = () => {
    if (!businessName || !name) {
      setError('Please fill in all fields');
      return false;
    }
    return true;
  };

  const handleNextStep = () => {
    if (validateFirstStep()) {
      setError('');
      setStep(2);
    }
  };

  const handlePrevStep = () => {
    setError('');
    setStep(1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Reset previous messages
    setError('');
    setSuccess('');
    
    // Validation
    if (!businessName || !name || !email || !password || !confirmPassword) {
      setError('Please fill in all fields');
      return;
    }
    
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    if (password.length < 6) {
      setError('Password must be at least 6 characters');
      return;
    }

    if (!agreeToTerms) {
      setError('You must agree to the Terms of Service and Privacy Policy');
      return;
    }
    
    try {
      setIsLoading(true);
      
      console.log('Attempting to register with:', { businessName, name, email });
      
      // Call the register function from AuthContext to use the real API
      const result = await register(businessName, name, email, password);
      console.log('Registration successful:', result);
      
      setSuccess('Registration successful! Setting up your account...');
      
      // Redirect to dashboard after successful registration
      setTimeout(() => {
        navigate('/dashboard');
      }, 1500);
    } catch (err) {
      console.error('Registration error in component:', err);
      // Extract error message from response if available
      const errorMessage = err.response?.data?.message || 'Failed to register. Please try again.';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 24
      }
    }
  };

  const slideVariants = {
    hidden: { x: 100, opacity: 0 },
    visible: { 
      x: 0, 
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 30
      }
    },
    exit: { 
      x: -100, 
      opacity: 0,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 30
      }
    }
  };

  return (
    <div className="min-h-screen flex flex-col md:flex-row overflow-hidden">
      {/* Left side - Branding and information */}
      <div className="hidden md:flex md:w-1/2 bg-gradient-to-br from-primary-600 to-primary-800 text-white p-12 flex-col justify-between relative overflow-hidden">
        <div className="absolute inset-0 bg-black opacity-10 z-0"></div>
        <div className="absolute bottom-0 left-0 right-0 h-1/2 bg-gradient-to-t from-black/30 to-transparent z-0"></div>
        
        {/* Abstract shapes for visual interest */}
        <div className="absolute top-20 right-20 w-64 h-64 rounded-full bg-white/10 filter blur-xl z-0"></div>
        <div className="absolute bottom-20 left-20 w-40 h-40 rounded-full bg-white/5 filter blur-lg z-0"></div>
        
        <div className="relative z-10">
          <h1 className="text-4xl font-bold mb-2">AI Auto Review</h1>
          <p className="text-xl font-light text-white/80">Revolutionizing customer review management</p>
        </div>
        
        <div className="relative z-10 space-y-8">
          <div className="flex items-start space-x-4">
            <div className="bg-white/20 p-2 rounded-lg">
              <CheckCircle weight="fill" className="h-6 w-6" />
            </div>
            <div>
              <h3 className="font-medium text-lg">AI-Powered Responses</h3>
              <p className="text-white/70">Generate personalized responses to customer reviews in seconds</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-4">
            <div className="bg-white/20 p-2 rounded-lg">
              <CheckCircle weight="fill" className="h-6 w-6" />
            </div>
            <div>
              <h3 className="font-medium text-lg">Multi-Platform Support</h3>
              <p className="text-white/70">Manage reviews from Google, Facebook, Yelp and more in one place</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-4">
            <div className="bg-white/20 p-2 rounded-lg">
              <CheckCircle weight="fill" className="h-6 w-6" />
            </div>
            <div>
              <h3 className="font-medium text-lg">Advanced Analytics</h3>
              <p className="text-white/70">Gain valuable insights from your customer feedback</p>
            </div>
          </div>
        </div>
        
        <div className="relative z-10 text-sm text-white/60">
          Â© 2025 AI Auto Review. All rights reserved.
        </div>
      </div>
      
      {/* Right side - Registration form */}
      <div className="w-full md:w-1/2 bg-white flex items-center justify-center p-6 md:p-12">
        <motion.div 
          className="max-w-md w-full space-y-8"
          initial="hidden"
          animate="visible"
          variants={containerVariants}
        >
          <motion.div variants={itemVariants}>
            <div className="flex justify-center">
              <div className="h-16 w-16 bg-gradient-to-br from-primary-500 to-primary-700 text-white flex items-center justify-center rounded-full shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
              </div>
            </div>
            <h1 className="mt-4 text-center text-3xl font-extrabold text-gray-900">
              Start your 14-day free trial
            </h1>
            <p className="mt-2 text-center text-sm text-gray-600">
              Already have an account?{' '}
              <Link to="/login" className="font-medium text-primary-600 hover:text-primary-500 transition-colors duration-200">
                Sign in
              </Link>
            </p>
          </motion.div>
          
          {/* Progress indicator */}
          <div className="flex items-center justify-center">
            <div className="w-full max-w-xs">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full bg-gray-200 h-1 rounded-full"></div>
                </div>
                <div className="relative flex justify-between">
                  <div className={`flex flex-col items-center ${step >= 1 ? 'text-primary-600' : 'text-gray-400'}`}>
                    <div className={`w-8 h-8 flex items-center justify-center rounded-full ${step >= 1 ? 'bg-primary-600 text-white' : 'bg-gray-200 text-gray-400'}`}>
                      1
                    </div>
                    <span className="text-xs mt-1">Business</span>
                  </div>
                  <div className={`flex flex-col items-center ${step >= 2 ? 'text-primary-600' : 'text-gray-400'}`}>
                    <div className={`w-8 h-8 flex items-center justify-center rounded-full ${step >= 2 ? 'bg-primary-600 text-white' : 'bg-gray-200 text-gray-400'}`}>
                      2
                    </div>
                    <span className="text-xs mt-1">Account</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <AnimatePresence>
            {error && (
              <motion.div 
                className="bg-red-50 border-l-4 border-red-400 p-4 rounded-md"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ type: 'spring', stiffness: 500, damping: 30 }}
              >
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <WarningCircle weight="fill" className="h-5 w-5 text-red-400" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700">{error}</p>
                  </div>
                </div>
              </motion.div>
            )}
            
            {success && (
              <motion.div 
                className="bg-green-50 border-l-4 border-green-400 p-4 rounded-md"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ type: 'spring', stiffness: 500, damping: 30 }}
              >
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <CheckCircle weight="fill" className="h-5 w-5 text-green-400" />
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-green-700">{success}</p>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
          
          <motion.form 
            className="mt-8 space-y-6" 
            onSubmit={handleSubmit}
            variants={itemVariants}
          >
            <AnimatePresence mode="wait">
              {step === 1 && (
                <motion.div 
                  key="step1"
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  variants={slideVariants}
                  className="space-y-4"
                >
                  <motion.div variants={itemVariants} className="relative">
                    <label htmlFor="business-name" className="block text-sm font-medium text-gray-700 mb-1">
                      Business Name
                    </label>
                    <div className="relative rounded-md shadow-sm">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Buildings weight="bold" className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        id="business-name"
                        name="businessName"
                        type="text"
                        required
                        value={businessName}
                        onChange={(e) => setBusinessName(e.target.value)}
                        className="appearance-none block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition duration-200 ease-in-out sm:text-sm"
                        placeholder="Your Business Name"
                      />
                    </div>
                  </motion.div>

                  <motion.div variants={itemVariants} className="relative">
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                      Your Name
                    </label>
                    <div className="relative rounded-md shadow-sm">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <User weight="bold" className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        id="name"
                        name="name"
                        type="text"
                        required
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        className="appearance-none block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition duration-200 ease-in-out sm:text-sm"
                        placeholder="Your Full Name"
                      />
                    </div>
                  </motion.div>
                  
                  <motion.div variants={itemVariants} className="pt-4">
                    <button
                      type="button"
                      onClick={handleNextStep}
                      className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition duration-200 ease-in-out shadow-md hover:shadow-lg"
                    >
                      Continue
                      <ArrowRight weight="bold" className="ml-2 h-5 w-5" />
                    </button>
                  </motion.div>
                </motion.div>
              )}
              
              {step === 2 && (
                <motion.div 
                  key="step2"
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  variants={slideVariants}
                  className="space-y-4"
                >
                  <motion.div variants={itemVariants} className="relative">
                    <label htmlFor="email-address" className="block text-sm font-medium text-gray-700 mb-1">
                      Email Address
                    </label>
                    <div className="relative rounded-md shadow-sm">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Envelope weight="bold" className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        id="email-address"
                        name="email"
                        type="email"
                        autoComplete="email"
                        required
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="appearance-none block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition duration-200 ease-in-out sm:text-sm"
                        placeholder="you@example.com"
                      />
                    </div>
                  </motion.div>
                  
                  <motion.div variants={itemVariants} className="relative">
                    <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                      Password
                    </label>
                    <div className="relative rounded-md shadow-sm">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Lock weight="bold" className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        id="password"
                        name="password"
                        type={showPassword ? "text" : "password"}
                        required
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="appearance-none block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition duration-200 ease-in-out sm:text-sm"
                        placeholder="â¢â¢â¢â¢â¢â¢â¢â¢"
                      />
                      <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="text-gray-400 hover:text-gray-500 focus:outline-none"
                        >
                          {showPassword ? (
                            <EyeSlash weight="bold" className="h-5 w-5" />
                          ) : (
                            <Eye weight="bold" className="h-5 w-5" />
                          )}
                        </button>
                      </div>
                    </div>
                    <p className="mt-1 text-xs text-gray-500">Password must be at least 6 characters</p>
                  </motion.div>
                  
                  <motion.div variants={itemVariants} className="relative">
                    <label htmlFor="confirm-password" className="block text-sm font-medium text-gray-700 mb-1">
                      Confirm Password
                    </label>
                    <div className="relative rounded-md shadow-sm">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Lock weight="bold" className="h-5 w-5 text-gray-400" />
                      </div>
                      <input
                        id="confirm-password"
                        name="confirmPassword"
                        type={showConfirmPassword ? "text" : "password"}
                        required
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        className="appearance-none block w-full pl-10 pr-10 py-3 border border-gray-300 rounded-lg placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition duration-200 ease-in-out sm:text-sm"
                        placeholder="â¢â¢â¢â¢â¢â¢â¢â¢"
                      />
                      <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                        <button
                          type="button"
                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                          className="text-gray-400 hover:text-gray-500 focus:outline-none"
                        >
                          {showConfirmPassword ? (
                            <EyeSlash weight="bold" className="h-5 w-5" />
                          ) : (
                            <Eye weight="bold" className="h-5 w-5" />
                          )}
                        </button>
                      </div>
                    </div>
                  </motion.div>
                  
                  <motion.div variants={itemVariants} className="relative flex items-start">
                    <div className="flex items-center h-5">
                      <input
                        id="terms"
                        name="terms"
                        type="checkbox"
                        checked={agreeToTerms}
                        onChange={(e) => setAgreeToTerms(e.target.checked)}
                        className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                      />
                    </div>
                    <div className="ml-3 text-sm">
                      <label htmlFor="terms" className="font-medium text-gray-700">
                        I agree to the{' '}
                        <a href="#" className="text-primary-600 hover:text-primary-500">
                          Terms of Service
                        </a>{' '}
                        and{' '}
                        <a href="#" className="text-primary-600 hover:text-primary-500">
                          Privacy Policy
                        </a>
                      </label>
                    </div>
                  </motion.div>
                  
                  <motion.div variants={itemVariants} className="flex space-x-4 pt-4">
                    <button
                      type="button"
                      onClick={handlePrevStep}
                      className="group relative w-1/3 flex justify-center py-3 px-4 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition duration-200 ease-in-out shadow-sm"
                    >
                      Back
                    </button>
                    
                    <button
                      type="submit"
                      disabled={isLoading}
                      className="group relative w-2/3 flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 transition duration-200 ease-in-out shadow-md hover:shadow-lg"
                    >
                      {isLoading ? (
                        <>
                          <SpinnerGap weight="bold" className="animate-spin -ml-1 mr-2 h-5 w-5" />
                          Creating account...
                        </>
                      ) : (
                        'Create your account'
                      )}
                    </button>
                  </motion.div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.form>
        </motion.div>
      </div>
    </div>
  );
}
