<?php
/**
 * Register Endpoint
 * 
 * This endpoint handles user and business registration.
 */

// Include common API utilities
require_once __DIR__ . '/../../common/init.php';

// Enable CORS for all origins during development
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');
header('Access-Control-Max-Age: 86400'); // 24 hours cache

// Handle preflight OPTIONS request
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// Get request method and data
$method = $_SERVER['REQUEST_METHOD'];
$data = json_decode(file_get_contents('php://input'), true);

// Only allow POST requests
if ($method !== 'POST') {
    sendErrorResponse('Method not allowed', 405);
}

// Validate required fields
$requiredFields = ['business_name', 'name', 'email', 'password'];
$errors = [];

foreach ($requiredFields as $field) {
    if (empty($data[$field])) {
        $errors[$field] = ucfirst(str_replace('_', ' ', $field)) . ' is required';
    }
}

if (!empty($errors)) {
    sendValidationErrorResponse($errors);
}

// Validate email format
if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
    sendValidationErrorResponse(['email' => 'Invalid email format']);
}

// Load models
require_once __DIR__ . '/../../../models/User.php';
require_once __DIR__ . '/../../../models/Business.php';

$userModel = new User();
$businessModel = new Business();

// Check if email already exists
if ($userModel->getByEmail($data['email'])) {
    sendErrorResponse('Email already in use', 409);
}

// Start transaction
$db = getDbConnection();
$db->beginTransaction();

try {
    // Create business
    $businessId = $businessModel->create($data['business_name'], 'free');
    
    if (!$businessId) {
        throw new Exception('Failed to create business');
    }
    
    // Create user as admin
    $userId = $userModel->create($businessId, $data['name'], $data['email'], $data['password'], 'admin');
    
    if (!$userId) {
        throw new Exception('Failed to create user');
    }
    
    // Commit transaction
    $db->commit();
    
    // Generate JWT token
    $token = generateJWT($userId, $businessId, 'admin');
    
    // Log registration
    $logSql = "
        INSERT INTO logs (user_id, action, description)
        VALUES (:user_id, 'register', 'User registered with business')
    ";
    
    $logStmt = $db->prepare($logSql);
    $logStmt->bindParam(':user_id', $userId, PDO::PARAM_INT);
    $logStmt->execute();
    
    // Return user data and token
    sendSuccessResponse([
        'user' => [
            'id' => $userId,
            'name' => $data['name'],
            'email' => $data['email'],
            'role' => 'admin',
            'business_id' => $businessId
        ],
        'business' => [
            'id' => $businessId,
            'name' => $data['business_name'],
            'plan' => 'free'
        ],
        'token' => $token
    ]);
} catch (Exception $e) {
    // Rollback transaction on error
    $db->rollBack();
    
    // Log error
    error_log('Registration error: ' . $e->getMessage());
    
    // Send error response
    sendErrorResponse('Registration failed: ' . $e->getMessage());
}
